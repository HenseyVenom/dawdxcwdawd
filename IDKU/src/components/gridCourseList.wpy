<style lang='less'>
  .gridCourseList{
    flex-wrap: wrap;
    justify-content: space-between;
    position: relative;
    .gridItem{
      width: 314rpx;
      background: #FFFFFF;
      border: 0 solid #979797;
      box-shadow: 0 0 12rpx 0 rgba(213,213,213,0.50);
      border-radius: 10rpx;
      margin-bottom: 40rpx;
      .courseImage{
        border-top-left-radius: 10rpx;
        border-top-right-radius: 10rpx;
        width: 100%;
        height: 220rpx;
        background-color: #F8F8F8;
      }
      .age{
        font-size: 26rpx;
        color: #121212;
        opacity: 0.5;
        margin: 12rpx 10rpx 0;
      }
      .courseName{
        font-size: 30rpx;
        color: #121212;
        margin: 8rpx 10rpx 0;
        overflow: hidden;
        text-overflow:ellipsis;
        white-space: nowrap;
      }
      .price{
        font-size: 28rpx;
        margin: 8rpx 10rpx 8rpx;
      }
      .originalPrice{
        height: 28rpx;
        margin-left: 10rpx;
        font-size: 24rpx;
        color: #909090;
        margin-bottom: 10rpx;
      }
    }
    .mask{
      top: 0;
      left: -40rpx;
      right: -40rpx;
      bottom: -40rpx;
      position: absolute;
      opacity: 0.3;
      background: #000000;
      z-index: 1;
    }
  }

</style>
<template>
  <view class="gridCourseList flexR">
    <view class="gridItem flexC" wx:for="{{courseList}}" @tap.stop="clickCourse({{item}})" wx:key="course_{{i}}" wx:for-index="i" wx:for-item="item">
      <image class="courseImage" src="{{item.imgUrl}}"></image>
      <text class="age">{{item.ageTime?(item.ageTime+'周岁'):''}}</text>
      <text class="courseName">{{item.courseName}}</text>
      <text class="price {{item.purchaseMode=='special'?'themeColor':'originalPrice'}}">¥<text style="font-size: 40rpx">{{item.purchaseMode=='special'?item.activityPrice:item.packagePrice}}</text></text>
      <view class="originalPrice"><text wx:if="{{item.purchaseMode=='special'}}">原价:￥{{item.packagePrice}}</text></view>
    </view>

    <emptyView wx:if="{{!courseList||courseList.length==0}}" :height.sync="emptyHeight">
    </emptyView>
    <view class="mask" wx:if="{{showMask}}"></view>
  </view>

</template>
<!--课程列表 网格-->
<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import {pRequest} from "../utils/requestUtils";
  import emptyView from './emptyView'
  const app=wepy.$instance

  @connect({
    shopId (state) {
      return state.counter.shopId
    }
  })

  export default class GridCourseList extends wepy.component {
    props = {
      showMask:{
        type: Boolean,
        default: false,
        twoWay: true
      },
      // shopId:{
      //   type:String,
      //   default:''
      // },
      courseType:{
        type:String,
        default:''
      }
    }
    components={
      emptyView
    }
    data = {
      courseList:[],
      emptyHeight:'560rpx',
      page:app.isUseSaas()?{
        pageNum:1,
        pageSize:10,
        addPage(){
          this.pageNum++
        },
        refreshPage(){
          this.pageNum==1
        }
      }:{
        page:0,
        size:10,
        addPage(){
          this.page++
        },
        refreshPage(){
          this.page==1
        }
      },
      isloading:false
    }
    watch={
      shopId(newVal){
        if(newVal){
          // this.isLoading=false
          // this.refresh()
        }
      },
      courseType(newVal){
        if(newVal){
          this.refresh()
        }
      }
    }
    methods={
      clickCourse(courseItem){
        var id
        if(app.isUseSaas()){
          id=courseItem.packageId
        }else{
          id=courseItem.id
        }
        wx.navigateTo({
          url:'/pages/courseDetail?id='+id
        })
      }
    }
    refresh(){
      if(this.isLoading){
        return
      }
      this.page.refreshPage()
      this.getCourseList()
    }
    loadmore(){
      console.log('loadmore course')
      if(this.isLoading){
        return
      }
      if(this.isNoMore()){
        return
      }
      this.page.addPage()
      this.getCourseList()
    }
    isNoMore(){
      var isNoMore=false
      var needShowLoadMore=true
      if (app.isUseSaas()) {
        if(this.page.pageCount == this.page.pageNo){
          isNoMore=true
          needShowLoadMore=this.page.pageCount>0
        }
      }else{
        if(this.page.page >= (this.page.pageTotal-1)){
          isNoMore = true
          needShowLoadMore=this.page.pageTotal>0
        }
      }
      if(isNoMore&&needShowLoadMore){
        if (this.page.pageTotal != 0 || this.page.pageCount != 0) {
          wx.showToast({
            title: '没有更多了',
            icon: 'none'
          })
        }
      }
      return isNoMore
    }
    getCourseList(){
      if(this.shopId==0)return
      this.isLoading=true
      if (app.isUseSaas()) {
        pRequest("stu/home/packageList", {
          page: this.page,
          businessId: app.globalData.organizationId,
          shopId: app.globalData.shopId,
        }).then((res) => {
          wx.stopPullDownRefresh()
          this.isLoading=false
          res.list.forEach(item => {
            item.ageTime = ageTime(item)
          })
          this.courseList = res.list
          this.page = res.page
          this.$apply()
        }).catch((err)=>{
          wx.stopPullDownRefresh()
          this.isLoading=false
        })
      } else {
        var url='xb/front/unAuth/organShop/shopCourse/list?page='+this.page.page+"&size="+this.page.size+"&shop_id="+this.shopId
        if(this.courseType){
          url+=("&attribute="+this.courseType)
        }
        pRequest(url).then((res)=>{
          wx.stopPullDownRefresh()
          this.isLoading=false
          console.log("res:",res)
          this.page.pageTotal=res.totalPages
          this.page.page=res.number
          if(res.number==0){
            this.courseList=convertCourseListFromXB(res.content)
          }else{
            this.courseList=this.courseList.concat(convertCourseListFromXB(res.content))
          }
          this.$apply()
        }).catch((err)=>{
          wx.stopPullDownRefresh()
          this.isLoading=false
        })
      }
    }
  }

  function ageTime(item) {
    var minMonth=item.minAge
    var maxMonth=item.maxAge
    if(minMonth==0&&maxMonth==0){
      return''
    }else{
      var minAge= (minMonth/12).toFixed(0)
      var maxAge=(maxMonth/12).toFixed(0)
      if(minAge==0&&maxAge==0){
        return"0-1"
      }else{
        return minAge+'-'+maxAge
      }
    }
  }

  function convertCourseListFromXB(list) {
    if(!list){
      return []
    }
    return list.map((item)=>{
      return{
        id:item.id,
        imgUrl:item.logoUrl,
        ageTime:item.ageStart+'-'+item.ageEnd,
        courseName:item.name,
        packagePrice:item.price,
        purchaseMode:item.purchaseMode,
        activityPrice:item.activityPrice,
      }
    })
  }
</script>
